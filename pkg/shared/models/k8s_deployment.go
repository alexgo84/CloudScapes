package shared

import "CloudScapes/pkg/wire"

// K8sDeployment is a wire.Deployment compiled with the plan that it held a reference to in planid.
// This means that any null field value in wire.Deployment was replaced with the corresponding value
// from that deployments plan.
// This is the object that will be communicated into the CloudScapes agent.
type K8sDeployment struct {

	// Name is the name of the deployment. It will also be used as namespace and more unique configurations
	Name string `json:"name" db:"name"`

	// Replicas is the amount of pods that will be created for this deployment
	Replicas int64 `json:"replicas"`

	// ClusterName is the name of the cluster this deployment will be created on. Note that
	// the CloudScapes agent on each cluster will listen on the redis PubSub channel corresponding to
	// the cluster name. When deploying, the request will be trasmitted on a channel according to the
	// deployments cluster name.
	ClusterName int64 `json:"clusterID"`

	// ImagePath is the URL for the image that should be deployed
	ImagePath string `json:"imagePath"`
	// ImageSHA will be prepended to the image path `<imagePath>@<imageSHA>`
	ImageSHA string `json:"imageSHA"`
	// ExcludeFromUpdates means that the image will not be updated during cluster wider eleases.
	// Set this to false if you would like to retain a custom image for some deployment.
	ExcludeFromUpdates bool `json:"excludeFromUpdates"`
	// CPULimit indicates the maximum CPU that would be avaialble for each pod. Example: '100m'.
	CPULimit string `json:"CPULimit"`
	// MemLimit indicates the maximum memory that would be avaialble for each pod. Example: '100m'.
	MemLimit string `json:"memLimit"`
	// CPUReq indicates the size of CPU requests the pod will make. The pod will consume at least this amount. Example: '100m'.
	CPUReq string `json:"CPUReq"`
	// CPUMem indicates the size of memory requests the pod will make. The pod will consume at least this amount. Example: '100m'.
	MemReq string `json:"memReq"`
	// DatabaseServiceName identifies the server name this deployments should use.
	DatabaseServiceName string `json:"databaseServiceName"`
	// DatabaseServiceCloud identifies a database cloud with the service provider.
	DatabaseServiceCloud string `json:"databaseServiceCloud"`
	// DatabaseServicePlan identifies a database plan with the service provider.
	DatabaseServicePlan string `json:"databaseServicePlan"`

	// EnvVars identifies the environment variables that will be set on the deployment.
	// this is generated by merging the environment variables from the deployment with those
	// of the refernced plan. When both plan and deployment declare the same key, the value
	// from the deployment will be used.
	EnvVars map[string]interface{} `json:"envVars"`
	// CronJobs identifies the CronJobs that will be scheduled on the deployment namespace.
	// this is generated by merging CronJobs from the deployment with those
	// of the refernced plan. When both plan and deployment declare the same CronJob, only the one
	// from the deployment will be used.
	CronJobs []wire.CronJob `json:"cronJobs"`
	// ConfigMaps identifies the ConfigMaps to be applied on the deployment namespace.
	// this is generated by merging ConfigMaps from the deployment with those
	// of the refernced plan. When both plan and deployment declare the same ConfigMap name, only the one
	// from the deployment will be used.
	ConfigMaps []wire.ConfigMap `json:"configMaps"`
}
